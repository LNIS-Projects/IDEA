on:
  - push

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build LSOracle ${{ matrix.config.name }} ${{ matrix.config.image }}
    container: ghcr.io/lnis-uofu/lsoracle-build:${{ matrix.config.image }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: gcc-8
            cc: gcc-8
            cxx: g++-8
            image: groovy
            ccache: true
          - name: gcc-9
            cc: gcc-9
            cxx: g++-9
            image: groovy
            ccache: true
          - name: gcc-10
            cc: gcc-10
            cxx: g++-10
            image: groovy
            ccache: true
          - name: clang-8
            cc: clang-8
            cxx: clang++-8
            image: groovy
            ccache: true
          - name: clang-9
            cc: clang-9
            cxx: clang++-9
            image: groovy
            ccache: true
          - name: clang-10
            cc: clang-10
            cxx: clang++-10
            image: groovy
            ccache: true
          - name: clang-11
            cc: clang-11
            cxx: clang++-11
            image: groovy
            ccache: true
          - name: gcc-8
            cc: /opt/rh/devtoolset-8/root/usr/bin/gcc
            cxx: /opt/rh/devtoolset-8/root/usr/bin/g++
            image: centos7-gcc8
            ccache: false
          - name: clang-7
            cc: /opt/rh/llvm-toolset-7.0/root/usr/bin/clang
            cxx: /opt/rh/llvm-toolset-7.0/root/usr/bin/clang++
            image: centos7-gcc8
            ccache: false
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      CCACHE_COMPRESS: "true"
      CCACHE_COMPRESSLEVEL: "6"
      CCACHE_MAXSIZE: "400M"
      CCACHE_LOGFILE: ccache_log
      CCACHE_DIR: /__w/LSOracle/.ccache
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load ccache
        uses: actions/cache@v2
        if: ${{ matrix.config.ccache }}
        with:
          path: |
            /__w/LSOracle/.ccache
          key: cicd_testing_${{matrix.config.name}}_${{matrix.config.image}}
      - name: Zero cache stats
        if: ${{ matrix.config.ccache }}
        run: |
          ccache -z
      - name: Build
        run: |
          cmake -DCMAKE_BUILD_TYPE=RELEASE -B build .
          cmake --build build -j$(nproc)
      - name: Cache stats
        if: ${{ matrix.config.ccache }}
        run: |
          ccache -s
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: ${{ matrix.config.cc == 'gcc-10' && matrix.config.image == 'groovy' }}
        with:
          name: lsoracle-binary
          path: build/core/lsoracle
      - name: Unit Tests
        run: |
          build/unit_tests
  test:
    runs-on: ubuntu-latest
    container: ghcr.io/lnis-uofu/lsoracle-benchmarks:groovy
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Get binaries
        uses: actions/download-artifact@v2
        with:
          name: lsoracle-binary
      - name: Run tests
        run: |
          chmod +x lsoracle
          python3 basic_tests.py --cicd --lsoracle_exe ./lsoracle --abc_exe /usr/local/bin/yosys-abc --kahypar core/test.ini -vv
  benchmark:
    runs-on: ubuntu-latest
    name: Benchmarks
    container: ghcr.io/lnis-uofu/lsoracle-benchmarks:groovy
    needs: build
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Get binaries
        uses: actions/download-artifact@v2
        with:
          name: lsoracle-binary
      - name: Prep previous
        run: |
          mkdir -p benchmarks/previous
      - name: Run synthesis
        run: |
          cp lsoracle /usr/local/bin
          chmod +x /usr/local/bin/lsoracle
          mkdir -p /usr/local/share/lsoracle
          cp benchmarks/kahypar.ini /usr/local/share/lsoracle/test.ini
          cd benchmarks
          make everything.tsv -j $(nproc)
      - name: Archive results
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-results
          path: |
            benchmarks/everything.tsv
            benchmarks/*/*.log
            benchmarks/*/*.rtl
            benchmarks/*/*.mapped.v
            benchmarks/*/*.synth_report
            benchmarks/*/*.timing
            benchmarks/*/*.report
            benchmarks/*/*.everything
      - name: Get previous results
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: tags/cicd_test
          file: "everything.tsv"
          target: "benchmarks/previous/everything.tsv"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Render results
        continue-on-error: true
        run: |
          cd benchmarks
          make everything.pdf
      - name: Archive graph
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-graphs
          path: |
            benchmarks/everything.pdf
      - name: Publish results
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            benchmarks/everything.tsv
            benchmarks/everything.png
            benchmarks/everything.pdf
            benchmarks/*/*.log
            benchmarks/*/*.rtl
            benchmarks/*/*.mapped.v
            benchmarks/*/*.synth_report
            benchmarks/*/*.timing
            benchmarks/*/*.report
            benchmarks/*/*.everything
          prerelease: true
